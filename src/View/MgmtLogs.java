/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Controller.SessionManager;
import Model.Logs;
import Model.User;
import java.awt.Component;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtLogs extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    
    public MgmtLogs(SQLite sqlite) {
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));
        
//        UNCOMMENT TO DISABLE BUTTONS
//        clearBtn.setVisible(false);
//        debugBtn.setVisible(false);
    }
    
        public boolean reauthenticateCurrentUser(Component parentComponent) {
        JPasswordField passwordField = new JPasswordField();
        designer(passwordField, "PASSWORD");
        passwordField.setEchoChar('*');

        Object[] message = {
            "Enter your password to confirm:",
            passwordField
        };

        int result = JOptionPane.showConfirmDialog(
            parentComponent,
            message,
            "Reauthentication Required",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (result != JOptionPane.OK_OPTION) {
            return false;
        }

        String enteredPassword = new String(passwordField.getPassword());

        try {
            User currentUser = sqlite.getUser(SessionManager.getUsername());
            if (currentUser == null || currentUser.getLocked() == 1 || !currentUser.checkPassword(enteredPassword)) {
                JOptionPane.showMessageDialog(
                    parentComponent,
                    "Authentication failed. Operation aborted.",
                    "Invalid Password",
                    JOptionPane.ERROR_MESSAGE
                );
                return false;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                parentComponent,
                "Authentication error: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
            return false;
        }

        return true;
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }

    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Logs> logs = sqlite.getLogs();
        for(int nCtr = 0; nCtr < logs.size(); nCtr++){
            tableModel.addRow(new Object[]{
                logs.get(nCtr).getEvent(), 
                logs.get(nCtr).getUsername(), 
                logs.get(nCtr).getDesc(), 
                logs.get(nCtr).getTimestamp()});
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        clearBtn = new javax.swing.JButton();
        debugBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Event", "Username", "Description", "Timestamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(80);
            table.getColumnModel().getColumn(1).setPreferredWidth(160);
            table.getColumnModel().getColumn(2).setPreferredWidth(400);
            table.getColumnModel().getColumn(3).setPreferredWidth(240);
        }

        clearBtn.setBackground(new java.awt.Color(255, 255, 255));
        clearBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearBtn.setText("CLEAR");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        debugBtn.setBackground(new java.awt.Color(255, 255, 255));
        debugBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        debugBtn.setText("ENABLE/DISABLE DEBUG MODE");
        debugBtn.setToolTipText("");
        debugBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(debugBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(clearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debugBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
    int selectedRow = table.getSelectedRow();
    if (selectedRow < 0) return;

    // Only admins can clear logs
    if (SessionManager.getSessionRole() < SessionManager.ROLE_ADMINISTRATOR) {
        JOptionPane.showMessageDialog(
            this,
            "You are not allowed to access this feature.",
            "Access Denied",
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }

    String eventType = table.getValueAt(selectedRow, 0).toString();
    String username = table.getValueAt(selectedRow, 1).toString();
    String timestamp = table.getValueAt(selectedRow, 3).toString();

    boolean reauthRequired = eventType.equalsIgnoreCase("ALERT") ||
                              eventType.equalsIgnoreCase("WARNING");
    
    if (eventType.equalsIgnoreCase("CRITICAL")) {
        JOptionPane.showMessageDialog(
                this, 
                "You are not allowed to clear this log.",
                "Access Denied",
                JOptionPane.ERROR_MESSAGE
        );
        sqlite.addLogs("CRITICAL", SessionManager.getUsername(), "Attempted to CLEAR critical log.", new Timestamp(new Date().getTime()).toString());
        init();
        return;
    }

    if (reauthRequired) {
        boolean confirmed = reauthenticateCurrentUser(this);
        if (!confirmed) return;
    }

    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to clear this log?\n\nType: " + eventType + "\nUser: " + username + "\nTimestamp: " + timestamp,
        "Confirm Log Deletion",
        JOptionPane.YES_NO_OPTION
    );

    if (confirm == JOptionPane.YES_OPTION) {
        sqlite.clearLogByDetails(eventType, username, timestamp);
        JOptionPane.showMessageDialog(this, "Log cleared successfully.");
        init(); // refresh table
    }    
    }//GEN-LAST:event_clearBtnActionPerformed

    private void debugBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugBtnActionPerformed
        // Only admins can toggle debug mode
        if (SessionManager.getSessionRole() < SessionManager.ROLE_ADMINISTRATOR) {
            JOptionPane.showMessageDialog(
                this,
                "You are not allowed to access this feature.",
                "Access Denied",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        boolean confirmed = reauthenticateCurrentUser(this);
        if (!confirmed) return;

        String action = sqlite.DEBUG_MODE == 1 ? "DISABLE" : "ENABLE";
        int choice = JOptionPane.showConfirmDialog(
            this,
            "You are about to " + action + " DEBUG MODE.\n\n"
            + "This action allows printing internal SQL and database activity to console.\n\n"
            + "Performed by: " + SessionManager.getUsername() + "\n\n"
            + "Proceed with " + action + "?",
            "Toggle Debug Mode",
            JOptionPane.YES_NO_OPTION
        );

        if (choice != JOptionPane.YES_OPTION) return;

        if (sqlite.DEBUG_MODE == 1) {
            sqlite.DEBUG_MODE = 0;
            JOptionPane.showMessageDialog(this, "Debug mode DISABLED.");
        } else {
            sqlite.DEBUG_MODE = 1;
            JOptionPane.showMessageDialog(this, "Debug mode ENABLED.");

            // Create critical log
            String timestamp = new Timestamp(new Date().getTime()).toString();
            sqlite.addLogs(
                "CRITICAL",
                SessionManager.getUsername(),
                "DEBUG MODE was ENABLED by administrator.",
                timestamp
            );
        }
    }//GEN-LAST:event_debugBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton debugBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
